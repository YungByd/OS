TOKEN=import ; VALUE=import
TOKEN=identifier ; value=axios
TOKEN=from ; VALUE=from
TOKEN=string ; value=axios
TOKEN=const ; VALUE=const
TOKEN=identifier ; value=globalConst
TOKEN=assignee ; VALUE==
TOKEN=number ; value=100
TOKEN=function ; VALUE=function
TOKEN=identifier ; VALUE=initHandlers
TOKEN=open_round_bracket ; VALUE=(
TOKEN=identifier ; value=list
TOKEN=comma ; VALUE=,
TOKEN=identifier ; value=type
TOKEN=close_round_bracket ; VALUE=)
TOKEN=open_curly_brace ; VALUE={
TOKEN=switch ; VALUE=switch
TOKEN=open_round_bracket ; VALUE=(
TOKEN=identifier ; value=type
TOKEN=close_round_bracket ; VALUE=)
TOKEN=open_curly_brace ; VALUE={
TOKEN=case ; VALUE=case
TOKEN=string ; value=left
TOKEN=colon ; VALUE=:
TOKEN=identifier ; VALUE=list
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=children
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=forEach
TOKEN=open_round_bracket ; VALUE=(
TOKEN=identifier ; value=item
TOKEN=assignee ; VALUE==
TOKEN=more ; VALUE=>
TOKEN=open_curly_brace ; VALUE={
TOKEN=identifier ; VALUE=item
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=addEventListener
TOKEN=open_round_bracket ; VALUE=(
TOKEN=string ; value=click
TOKEN=comma ; VALUE=,
TOKEN=open_round_bracket ; VALUE=(
TOKEN=close_round_bracket ; VALUE=)
TOKEN=assignee ; VALUE==
TOKEN=more ; VALUE=>
TOKEN=open_curly_brace ; VALUE={
TOKEN=identifier ; VALUE=console
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=log
TOKEN=open_round_bracket ; VALUE=(
TOKEN=string ; value=clicked left
TOKEN=comma ; VALUE=,
TOKEN=identifier ; VALUE=item
TOKEN=dot ; VALUE=.
TOKEN=identifier ; value=id
TOKEN=close_round_bracket ; VALUE=)
TOKEN=close_curly_brace ; VALUE=}
TOKEN=close_round_bracket ; VALUE=)
TOKEN=close_curly_brace ; VALUE=}
TOKEN=close_round_bracket ; VALUE=)
TOKEN=break ; VALUE=break
TOKEN=case ; VALUE=case
TOKEN=string ; value=right
TOKEN=colon ; VALUE=:
TOKEN=identifier ; VALUE=list
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=children
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=forEach
TOKEN=open_round_bracket ; VALUE=(
TOKEN=identifier ; value=item
TOKEN=assignee ; VALUE==
TOKEN=more ; VALUE=>
TOKEN=open_curly_brace ; VALUE={
TOKEN=identifier ; VALUE=item
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=addEventListener
TOKEN=open_round_bracket ; VALUE=(
TOKEN=string ; value=click
TOKEN=comma ; VALUE=,
TOKEN=open_round_bracket ; VALUE=(
TOKEN=close_round_bracket ; VALUE=)
TOKEN=assignee ; VALUE==
TOKEN=more ; VALUE=>
TOKEN=open_curly_brace ; VALUE={
TOKEN=identifier ; VALUE=console
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=log
TOKEN=open_round_bracket ; VALUE=(
TOKEN=string ; value=clicked right
TOKEN=comma ; VALUE=,
TOKEN=identifier ; VALUE=item
TOKEN=dot ; VALUE=.
TOKEN=identifier ; value=id
TOKEN=close_round_bracket ; VALUE=)
TOKEN=close_curly_brace ; VALUE=}
TOKEN=close_round_bracket ; VALUE=)
TOKEN=close_curly_brace ; VALUE=}
TOKEN=close_round_bracket ; VALUE=)
TOKEN=default ; VALUE=default
TOKEN=colon ; VALUE=:
TOKEN=identifier ; VALUE=console
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=log
TOKEN=open_round_bracket ; VALUE=(
TOKEN=string ; value=unknown type
TOKEN=comma ; VALUE=,
TOKEN=identifier ; value=type
TOKEN=close_round_bracket ; VALUE=)
TOKEN=close_curly_brace ; VALUE=}
TOKEN=close_curly_brace ; VALUE=}
TOKEN=function ; VALUE=function
TOKEN=identifier ; VALUE=init
TOKEN=open_round_bracket ; VALUE=(
TOKEN=close_round_bracket ; VALUE=)
TOKEN=open_curly_brace ; VALUE={
TOKEN=identifier ; VALUE=console
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=log
TOKEN=open_round_bracket ; VALUE=(
TOKEN=string ; value=init
TOKEN=close_round_bracket ; VALUE=)
TOKEN=semi_colon ; VALUE=;
TOKEN=const ; VALUE=const
TOKEN=identifier ; value=modal
TOKEN=assignee ; VALUE==
TOKEN=identifier ; VALUE=document
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=createElement
TOKEN=open_round_bracket ; VALUE=(
TOKEN=string ; value=modal
TOKEN=close_round_bracket ; VALUE=)
TOKEN=semi_colon ; VALUE=;
TOKEN=identifier ; VALUE=document
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=body
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=appendChild
TOKEN=open_round_bracket ; VALUE=(
TOKEN=identifier ; value=modal
TOKEN=close_round_bracket ; VALUE=)
TOKEN=for ; VALUE=for
TOKEN=open_round_bracket ; VALUE=(
TOKEN=let ; VALUE=let
TOKEN=identifier ; value=i
TOKEN=assignee ; VALUE==
TOKEN=number ; value=0
TOKEN=semi_colon ; VALUE=;
TOKEN=identifier ; value=i
TOKEN=less ; VALUE=<
TOKEN=number ; value=10
TOKEN=semi_colon ; VALUE=;
TOKEN=identifier ; value=i
TOKEN=assignee ; VALUE==
TOKEN=identifier ; value=i
TOKEN=plus ; VALUE=+
TOKEN=number ; value=1
TOKEN=close_round_bracket ; VALUE=)
TOKEN=open_curly_brace ; VALUE={
TOKEN=close_curly_brace ; VALUE=}
TOKEN=close_curly_brace ; VALUE=}
TOKEN=identifier ; VALUE=window
TOKEN=dot ; VALUE=.
TOKEN=identifier ; value=onload
TOKEN=assignee ; VALUE==
TOKEN=identifier ; VALUE=function
TOKEN=open_round_bracket ; VALUE=(
TOKEN=close_round_bracket ; VALUE=)
TOKEN=open_curly_brace ; VALUE={
TOKEN=identifier ; VALUE=init
TOKEN=open_round_bracket ; VALUE=(
TOKEN=close_round_bracket ; VALUE=)
TOKEN=identifier ; VALUE=initHandlers
TOKEN=open_round_bracket ; VALUE=(
TOKEN=identifier ; VALUE=document
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=querySelector
TOKEN=open_round_bracket ; VALUE=(
TOKEN=string ; value=.list-left
TOKEN=close_round_bracket ; VALUE=)
TOKEN=comma ; VALUE=,
TOKEN=string ; value=left
TOKEN=close_round_bracket ; VALUE=)
TOKEN=identifier ; VALUE=initHandlers
TOKEN=open_round_bracket ; VALUE=(
TOKEN=identifier ; VALUE=document
TOKEN=dot ; VALUE=.
TOKEN=identifier ; VALUE=querySelector
TOKEN=open_round_bracket ; VALUE=(
TOKEN=string ; value=.list-right
TOKEN=close_round_bracket ; VALUE=)
TOKEN=comma ; VALUE=,
TOKEN=string ; value=right
TOKEN=close_round_bracket ; VALUE=)
TOKEN=close_curly_brace ; VALUE=}
TOKEN=identifier ; value=arr
TOKEN=open_square_bracket ; VALUE=[
TOKEN=number ; value=1
TOKEN=comma ; VALUE=,
TOKEN=number ; value=2
TOKEN=comma ; VALUE=,
TOKEN=number ; value=3
TOKEN=close_square_bracket ; VALUE=]
